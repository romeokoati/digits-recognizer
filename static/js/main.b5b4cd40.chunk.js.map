{"version":3,"sources":["App.js","api.js","assets/logo.svg","registerServiceWorker.js","index.js"],"names":["count","validateStatusCode","response","Promise","resolve","reject","next","status","text","then","pixels","MAIN_CONTAINER_STYLE","width","height","margin","SKETCH_CONTAINER_STYLE","border","MAIN_CONTAINER_WIDTH_PX","backgroundColor","App","sketchRef","useRef","useState","errors","setErrors","value","setValue","prediction","setPrediction","className","style","src","logo","alt","ref","onChange","e","target","tool","Tools","Pencil","imageFormat","lineColor","lineWidth","onClick","current","clear","image","toDataURL","undefined","fetch","method","headers","body","JSON","stringify","makePrediction","catch","color","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.b5b4cd40.chunk.js","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport { SketchField, Tools } from \"react-sketch\";\n\nimport { makePrediction } from \"./api\";\n\nimport logo from \"./assets/logo.svg\";\nimport \"./assets/App.css\";\n\nconst pixels = (count) => `${count}px`;\nconst percents = (count) => `${count}px`;\n\nconst MAIN_CONTAINER_WIDTH_PX = 200;\nconst MAIN_CONTAINER_HEIGHT = 100;\nconst MAIN_CONTAINER_STYLE = {\n  width: pixels(MAIN_CONTAINER_WIDTH_PX),\n  height: percents(MAIN_CONTAINER_HEIGHT),\n  margin: \"0 auto\",\n};\n\nconst SKETCH_CONTAINER_STYLE = {\n  border: \"1px solid black\",\n  width: pixels(MAIN_CONTAINER_WIDTH_PX - 2),\n  height: pixels(MAIN_CONTAINER_WIDTH_PX - 2),\n  backgroundColor: \"white\",\n};\n\nconst App = () => {\n  const sketchRef = useRef(null);\n  const [errors, setErrors] = useState();\n  const [value, setValue] = useState();\n  const [prediction, setPrediction] = useState();\n\n  const handleSubmit = () => {\n    const image = sketchRef.current.toDataURL();\n\n    setPrediction(undefined);\n    setErrors(undefined);\n\n    makePrediction(image).then(setPrediction).catch(setErrors);\n  };\n\n  const handleClear = (e) => sketchRef.current.clear();\n\n  const handleChange = (e) => {\n    setValue(e.target.value);\n  };\n\n  return (\n    <div className=\"App\" style={MAIN_CONTAINER_STYLE}>\n      <div>\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"App-title\">Draw a digit</h1>\n        </header>\n        <div style={SKETCH_CONTAINER_STYLE}>\n          <SketchField\n            ref={sketchRef}\n            onChange={handleChange}\n            width=\"100%\"\n            height=\"100%\"\n            tool={Tools.Pencil}\n            imageFormat=\"jpg\"\n            lineColor=\"#111\"\n            lineWidth={10}\n            value={value}\n          />\n        </div>\n        {prediction && <h3>Predicted value is: {prediction}</h3>}\n        <button onClick={handleClear}>Clear</button>\n        <button onClick={handleSubmit}>Guess the number</button>\n        {errors && <p style={{ color: \"red\" }}>Something went wrong</p>}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const validateStatusCode = response =>\n  new Promise((resolve, reject) => {\n    const status = response.status;\n    const next = status < 400 ? resolve : reject;\n    response.text().then(next);\n  });\n\nexport const makePrediction = image =>\n  fetch(\"/api/predict\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({ image })\n  }).then(validateStatusCode);\n","export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}