{"version":3,"sources":["App.js","api.js","logo.svg","reportWebVitals.js","index.js"],"names":["count","validateStatusCode","response","Promise","resolve","reject","next","status","text","then","pixels","MAIN_CONTAINER_STYLE","width","height","margin","SKETCH_CONTAINER_STYLE","border","MAIN_CONTAINER_WIDTH_PX","backgroundColor","App","sketchRef","useRef","useState","errors","setErrors","value","setValue","prediction","setPrediction","className","style","src","logo","alt","ref","onChange","e","target","tool","Tools","Pencil","imageFormat","lineColor","lineWidth","onClick","current","clear","image","toDataURL","undefined","fetch","method","headers","body","JSON","stringify","makePrediction","catch","color","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oKASkBA,E,6DCTZC,EAAqB,SAAAC,GAAQ,OACjC,IAAIC,SAAQ,SAACC,EAASC,GACpB,IACMC,EADSJ,EAASK,OACF,IAAMH,EAAUC,EACtCH,EAASM,OAAOC,KAAKH,OCJV,MAA0B,iCFQnCI,G,MAAS,SAACV,GAAD,gBAAcA,EAAd,QAKTW,EAAuB,CAC3BC,MAAOF,EAHuB,KAI9BG,QANgBb,EAGY,IAHb,UAAcA,EAAd,OAOfc,OAAQ,UAGJC,EAAyB,CAC7BC,OAAQ,kBACRJ,MAAOF,EAAOO,KACdJ,OAAQH,EAAOO,KACfC,gBAAiB,SAqDJC,EAlDH,WACV,IAAMC,EAAYC,iBAAO,MADT,EAEYC,qBAFZ,mBAETC,EAFS,KAEDC,EAFC,OAGUF,qBAHV,mBAGTG,EAHS,KAGFC,EAHE,OAIoBJ,qBAJpB,mBAITK,EAJS,KAIGC,EAJH,KAqBhB,OACE,qBAAKC,UAAU,MAAMC,MAAOnB,EAA5B,SACE,gCACE,yBAAQkB,UAAU,aAAlB,UACE,qBAAKE,IAAKC,EAAMH,UAAU,WAAWI,IAAI,SACzC,oBAAIJ,UAAU,YAAd,6BAEF,qBAAKC,MAAOf,EAAZ,SACE,cAAC,cAAD,CACEmB,IAAKd,EACLe,SAdW,SAACC,GACpBV,EAASU,EAAEC,OAAOZ,QAcVb,MAAM,OACNC,OAAO,OACPyB,KAAMC,QAAMC,OACZC,YAAY,MACZC,UAAU,OACVC,UAAW,GACXlB,MAAOA,MAGVE,GAAc,sDAAyBA,KACxC,wBAAQiB,QA3BM,SAACR,GAAD,OAAOhB,EAAUyB,QAAQC,SA2BvC,mBACA,wBAAQF,QArCO,WACnB,IAAMG,EAAQ3B,EAAUyB,QAAQG,YAEhCpB,OAAcqB,GACdzB,OAAUyB,GC7BgB,SAAAF,GAAK,OACjCG,MAAM,eAAgB,CACpBC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAER,YACtBtC,KAAKR,GDwBNuD,CAAeT,GAAOtC,KAAKmB,GAAe6B,MAAMjC,IA+B5C,8BACCD,GAAU,mBAAGO,MAAO,CAAE4B,MAAO,OAAnB,wCG1DJC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBpD,MAAK,YAAkD,IAA/CqD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ef1969bb.chunk.js","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport { SketchField, Tools } from \"react-sketch\";\n\nimport { makePrediction } from \"./api\";\n\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nconst pixels = (count) => `${count}px`;\nconst percents = (count) => `${count}px`;\n\nconst MAIN_CONTAINER_WIDTH_PX = 200;\nconst MAIN_CONTAINER_HEIGHT = 100;\nconst MAIN_CONTAINER_STYLE = {\n  width: pixels(MAIN_CONTAINER_WIDTH_PX),\n  height: percents(MAIN_CONTAINER_HEIGHT),\n  margin: \"0 auto\",\n};\n\nconst SKETCH_CONTAINER_STYLE = {\n  border: \"1px solid black\",\n  width: pixels(MAIN_CONTAINER_WIDTH_PX - 2),\n  height: pixels(MAIN_CONTAINER_WIDTH_PX - 2),\n  backgroundColor: \"white\",\n};\n\nconst App = () => {\n  const sketchRef = useRef(null);\n  const [errors, setErrors] = useState();\n  const [value, setValue] = useState();\n  const [prediction, setPrediction] = useState();\n\n  const handleSubmit = () => {\n    const image = sketchRef.current.toDataURL();\n\n    setPrediction(undefined);\n    setErrors(undefined);\n\n    makePrediction(image).then(setPrediction).catch(setErrors);\n  };\n\n  const handleClear = (e) => sketchRef.current.clear();\n\n  const handleChange = (e) => {\n    setValue(e.target.value);\n  };\n\n  return (\n    <div className=\"App\" style={MAIN_CONTAINER_STYLE}>\n      <div>\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"App-title\">Draw a digit</h1>\n        </header>\n        <div style={SKETCH_CONTAINER_STYLE}>\n          <SketchField\n            ref={sketchRef}\n            onChange={handleChange}\n            width=\"100%\"\n            height=\"100%\"\n            tool={Tools.Pencil}\n            imageFormat=\"jpg\"\n            lineColor=\"#111\"\n            lineWidth={10}\n            value={value}\n          />\n        </div>\n        {prediction && <h3>Predicted value is: {prediction}</h3>}\n        <button onClick={handleClear}>Clear</button>\n        <button onClick={handleSubmit}>Guess the number</button>\n        {errors && <p style={{ color: \"red\" }}>Something went wrong</p>}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const validateStatusCode = response =>\n  new Promise((resolve, reject) => {\n    const status = response.status;\n    const next = status < 400 ? resolve : reject;\n    response.text().then(next);\n  });\n\nexport const makePrediction = image =>\n  fetch(\"/api/predict\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({ image })\n  }).then(validateStatusCode);\n","export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}